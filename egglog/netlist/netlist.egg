(sort Expr)

(constructor Wire (String i64) Expr)
(constructor Reg (String i64) Expr)
(constructor Mux (Expr Expr) Expr)
(constructor Demux (Expr Expr) Expr)
(constructor And (Expr Expr) Expr)
(constructor Or (Expr Expr) Expr)
(constructor Xor (Expr Expr) Expr)
(constructor Not (Expr) Expr)
(constructor Select (i64 Expr) Expr :cost 1000)
(constructor Concat (Expr Expr) Expr)

(datatype Type
  (Bitvector i64))

(relation HasType (Expr Type))

(ruleset typing)

(rule
  ((Wire name n))
  ((HasType (Wire name n) (Bitvector n)))
  :ruleset typing)

(rule
  ((Reg name n))
  ((HasType (Reg name n) (Bitvector n)))
  :ruleset typing)

(rule
  ((Not a)
   (HasType a (Bitvector 1)))
  ((HasType (Not a) (Bitvector 1)))
  :ruleset typing)

(rule
  ((And a b)
   (HasType a (Bitvector 1))
   (HasType b (Bitvector 1)))
  ((HasType (And a b) (Bitvector 1)))
  :ruleset typing)

(rule
  ((Or a b)
   (HasType a (Bitvector 1))
   (HasType b (Bitvector 1)))
  ((HasType (Or a b) (Bitvector 1)))
  :ruleset typing)

(rule
  ((Xor a b)
   (HasType a (Bitvector 1))
   (HasType b (Bitvector 1)))
  ((HasType (Xor a b) (Bitvector 1)))
  :ruleset typing)

(rule
  ((Select i a)
   (HasType a (Bitvector bw))
   (>= i 0)
   (< i bw))
  ((HasType (Select i a) (Bitvector 1)))
  :ruleset typing)

(rule
 ((Concat a b)
  (HasType a (Bitvector n))
  (HasType b (Bitvector m)))
 ((HasType (Concat a b) (Bitvector (+ n m))))
 :ruleset typing)

(rule
  ((Mux s i)
   (HasType s (Bitvector m))
   (HasType i (Bitvector n))
   (= m (log2 n)))
  ((HasType (Mux s i) (Bitvector 1)))
  :ruleset typing)

(rule
  ((Demux s i)
   (HasType s (Bitvector 1))
   (HasType i (Bitvector n))
   (= n (log2 m)))
  ((HasType (Demux s i) (Bitvector m)))
  :ruleset typing)

(ruleset decomp)

;; Commute
(rewrite
 (Or a b)
 (Or b a)
 :ruleset decomp)

(rewrite
 (And a b)
 (And b a)
 :ruleset decomp)

;; 2-to-1 mux
;; s a b <--> (a & ~s) | (b & s)
(rule
 ((= mux (Or e0 e1))
  (= e0 (And a (Not s)))
  (= e1 (And b s)))
 ((union mux (Mux s (Concat a b))))
 :ruleset decomp)

;; 2n-to-1 mux
(rule
 ((= m_a (Mux s a))
  (HasType s (Bitvector n_s))
  (HasType a (Bitvector n_a))
  (= m_b (Mux s b))
  (HasType b (Bitvector n_b))
  (= n_a n_b)
  (= m_c (Mux s0 (Concat m_a m_b))))
 ((union m_c
   (Mux (Concat s s0) (Concat a b))))
 :ruleset decomp)

